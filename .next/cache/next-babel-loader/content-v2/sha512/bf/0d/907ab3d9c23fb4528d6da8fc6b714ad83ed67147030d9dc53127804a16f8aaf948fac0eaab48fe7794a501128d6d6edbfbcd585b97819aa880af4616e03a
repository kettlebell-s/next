{"ast":null,"code":"import { createAsyncThunk, createSelector, createSlice } from '@reduxjs/toolkit';\n// import { apiUsersGetMe } from '@services/api/users.api';\nimport { apiAuthLogout } from '@services/api/auth.api';\nimport { apolloClient } from '@helpers/apollo.helper';\nimport { GET_MEMBER_QUERY } from '@constants/graphql.constants';\nexport const bindUser = createAsyncThunk('user/bindUser', async () => {\n  const {\n    data\n  } = await apolloClient.query({\n    query: GET_MEMBER_QUERY\n  }); // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\n  return data.member;\n});\nexport const logoutUser = createAsyncThunk('user/logoutUser', async () => apiAuthLogout());\nconst initialState = null;\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(bindUser.fulfilled, (state, action) => {\n      state = action.payload;\n      return state;\n    });\n    builder.addCase(bindUser.rejected, state => {\n      state = null;\n      return state;\n    });\n    builder.addCase(logoutUser.fulfilled, state => {\n      state = null;\n      return state;\n    });\n  }\n});\nexport const selectorUser = createSelector(state => state.user, user => user);","map":{"version":3,"sources":["/Users/might/Documents/projects/mine/nextjs/src/redux/user.redux.ts"],"names":["createAsyncThunk","createSelector","createSlice","apiAuthLogout","apolloClient","GET_MEMBER_QUERY","bindUser","data","query","member","logoutUser","initialState","userSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","rejected","selectorUser","user"],"mappings":"AAAA,SACEA,gBADF,EACoBC,cADpB,EACoCC,WADpC,QAEO,kBAFP;AAIA;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AAIA,OAAO,MAAMC,QAAQ,GAAGN,gBAAgB,CAAC,eAAD,EAAkB,YAAY;AACpE,QAAM;AAAEO,IAAAA;AAAF,MAAW,MAAMH,YAAY,CAACI,KAAb,CAAmB;AACxCA,IAAAA,KAAK,EAAEH;AADiC,GAAnB,CAAvB,CADoE,CAKpE;;AACA,SAAOE,IAAI,CAACE,MAAZ;AACD,CAPuC,CAAjC;AAQP,OAAO,MAAMC,UAAU,GAAGV,gBAAgB,CAAC,iBAAD,EAAoB,YAAYG,aAAa,EAA7C,CAAnC;AAEP,MAAMQ,YAAuB,GAAG,IAAhC;AAEA,OAAO,MAAMC,SAAS,GAAGV,WAAW,CAAoD;AACtFW,EAAAA,IAAI,EAAE,MADgF;AAEtFF,EAAAA,YAFsF;AAGtFG,EAAAA,QAAQ,EAAE,EAH4E;AAItFC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBX,QAAQ,CAACY,SAAzB,EAAoC,CAACC,KAAD,EAAQC,MAAR,KAA2C;AAC7ED,MAAAA,KAAK,GAAGC,MAAM,CAACC,OAAf;AACA,aAAOF,KAAP;AACD,KAHD;AAIAH,IAAAA,OAAO,CAACC,OAAR,CAAgBX,QAAQ,CAACgB,QAAzB,EAAoCH,KAAD,IAAW;AAC5CA,MAAAA,KAAK,GAAG,IAAR;AACA,aAAOA,KAAP;AACD,KAHD;AAIAH,IAAAA,OAAO,CAACC,OAAR,CAAgBP,UAAU,CAACQ,SAA3B,EAAuCC,KAAD,IAAW;AAC/CA,MAAAA,KAAK,GAAG,IAAR;AACA,aAAOA,KAAP;AACD,KAHD;AAID;AAjBqF,CAApD,CAA7B;AAoBP,OAAO,MAAMI,YAAY,GAAGtB,cAAc,CAAEkB,KAAD,IAAgCA,KAAK,CAACK,IAAvC,EAA8CA,IAAD,IAAUA,IAAvD,CAAnC","sourcesContent":["import {\n  createAsyncThunk, createSelector, createSlice, PayloadAction, SliceCaseReducers,\n} from '@reduxjs/toolkit';\nimport { UserDTO } from '@dtos/user.dto';\n// import { apiUsersGetMe } from '@services/api/users.api';\nimport { apiAuthLogout } from '@services/api/auth.api';\nimport { apolloClient } from '@helpers/apollo.helper';\nimport { GET_MEMBER_QUERY } from '@constants/graphql.constants';\n\nexport type UserState = UserDTO | null;\n\nexport const bindUser = createAsyncThunk('user/bindUser', async () => {\n  const { data } = await apolloClient.query({\n    query: GET_MEMBER_QUERY,\n  });\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return data.member;\n});\nexport const logoutUser = createAsyncThunk('user/logoutUser', async () => apiAuthLogout());\n\nconst initialState: UserState = null;\n\nexport const userSlice = createSlice<UserDTO | null, SliceCaseReducers<UserDTO | null>>({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(bindUser.fulfilled, (state, action: PayloadAction<UserDTO>) => {\n      state = action.payload;\n      return state;\n    });\n    builder.addCase(bindUser.rejected, (state) => {\n      state = null;\n      return state;\n    });\n    builder.addCase(logoutUser.fulfilled, (state) => {\n      state = null;\n      return state;\n    });\n  },\n});\n\nexport const selectorUser = createSelector((state: { user: UserState }) => state.user, (user) => user);\n"]},"metadata":{},"sourceType":"module"}