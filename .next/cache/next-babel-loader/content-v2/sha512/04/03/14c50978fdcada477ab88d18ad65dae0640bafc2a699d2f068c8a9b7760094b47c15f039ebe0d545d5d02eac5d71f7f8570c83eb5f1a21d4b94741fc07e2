{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport qs from 'qs';\nimport { CONFIG } from '@constants/config.constants';\n\nconst executeSendRequest = method => (urlPath, body) => {\n  const url = `${CONFIG.API_URL}${urlPath}`;\n  return axios[method](url, body ? _objectSpread({}, body) : undefined, {\n    withCredentials: true\n  }).then(({\n    data\n  }) => data);\n};\n\nconst executeGetRequest = method => (urlPath, query, headers) => {\n  let url = `${CONFIG.API_URL}${urlPath}`;\n\n  if (query) {\n    url += `?${qs.stringify(query, {\n      encode: true,\n      arrayFormat: 'brackets'\n    })}`;\n  }\n\n  return axios[method](url, {\n    withCredentials: true,\n    headers\n  }).then(({\n    data\n  }) => data);\n};\n\nexport const post = executeSendRequest('post');\nexport const patch = executeSendRequest('patch');\nexport const put = executeSendRequest('put');\nexport const get = executeGetRequest('get');\nexport const del = executeGetRequest('delete');\naxios.interceptors.request.use(config => config, error => Promise.reject(error));","map":{"version":3,"sources":["/Users/might/Documents/projects/mine/nextjs/src/helpers/axios.helper.ts"],"names":["axios","qs","CONFIG","executeSendRequest","method","urlPath","body","url","API_URL","undefined","withCredentials","then","data","executeGetRequest","query","headers","stringify","encode","arrayFormat","post","patch","put","get","del","interceptors","request","use","config","error","Promise","reject"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,MAAT,QAAuB,6BAAvB;;AAEA,MAAMC,kBAAkB,GAAIC,MAAD,IAAsC,CAC/DC,OAD+D,EAE/DC,IAF+D,KAG5D;AACH,QAAMC,GAAG,GAAI,GAAEL,MAAM,CAACM,OAAQ,GAAEH,OAAQ,EAAxC;AACA,SAAOL,KAAK,CAACI,MAAD,CAAL,CAAiBG,GAAjB,EAAsBD,IAAI,qBAAQA,IAAR,IAAiBG,SAA3C,EAAsD;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAAtD,EAAiFC,IAAjF,CAAsF,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAcA,IAApG,CAAP;AACD,CAND;;AAOA,MAAMC,iBAAiB,GAAIT,MAAD,IAA8B,CACtDC,OADsD,EAEtDS,KAFsD,EAGtDC,OAHsD,KAInD;AACH,MAAIR,GAAG,GAAI,GAAEL,MAAM,CAACM,OAAQ,GAAEH,OAAQ,EAAtC;;AACA,MAAIS,KAAJ,EAAW;AACTP,IAAAA,GAAG,IAAK,IAAGN,EAAE,CAACe,SAAH,CAAaF,KAAb,EAAoB;AAAEG,MAAAA,MAAM,EAAE,IAAV;AAAgBC,MAAAA,WAAW,EAAE;AAA7B,KAApB,CAA+D,EAA1E;AACD;;AAED,SAAOlB,KAAK,CAACI,MAAD,CAAL,CAAiBG,GAAjB,EAAsB;AAAEG,IAAAA,eAAe,EAAE,IAAnB;AAAyBK,IAAAA;AAAzB,GAAtB,EAA0DJ,IAA1D,CAA+D,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAcA,IAA7E,CAAP;AACD,CAXD;;AAaA,OAAO,MAAMO,IAAI,GAAGhB,kBAAkB,CAAC,MAAD,CAA/B;AACP,OAAO,MAAMiB,KAAK,GAAGjB,kBAAkB,CAAC,OAAD,CAAhC;AACP,OAAO,MAAMkB,GAAG,GAAGlB,kBAAkB,CAAC,KAAD,CAA9B;AACP,OAAO,MAAMmB,GAAG,GAAGT,iBAAiB,CAAC,KAAD,CAA7B;AACP,OAAO,MAAMU,GAAG,GAAGV,iBAAiB,CAAC,QAAD,CAA7B;AAEPb,KAAK,CAACwB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAYA,MAA3C,EAAoDC,KAAD,IAAWC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAA9D","sourcesContent":["import axios from 'axios';\nimport qs from 'qs';\nimport { CONFIG } from '@constants/config.constants';\n\nconst executeSendRequest = (method: 'post' | 'patch' | 'put') => <T>(\n  urlPath: string,\n  body?: Record<string, unknown>,\n) => {\n  const url = `${CONFIG.API_URL}${urlPath}`;\n  return axios[method]<T>(url, body ? { ...body } : undefined, { withCredentials: true }).then(({ data }) => data);\n};\nconst executeGetRequest = (method: 'get' | 'delete') => <T>(\n  urlPath: string,\n  query?: Record<string, unknown> | null,\n  headers?: Record<string, unknown>,\n) => {\n  let url = `${CONFIG.API_URL}${urlPath}`;\n  if (query) {\n    url += `?${qs.stringify(query, { encode: true, arrayFormat: 'brackets' })}`;\n  }\n\n  return axios[method]<T>(url, { withCredentials: true, headers }).then(({ data }) => data);\n};\n\nexport const post = executeSendRequest('post');\nexport const patch = executeSendRequest('patch');\nexport const put = executeSendRequest('put');\nexport const get = executeGetRequest('get');\nexport const del = executeGetRequest('delete');\n\naxios.interceptors.request.use((config) => config, (error) => Promise.reject(error));\n"]},"metadata":{},"sourceType":"module"}