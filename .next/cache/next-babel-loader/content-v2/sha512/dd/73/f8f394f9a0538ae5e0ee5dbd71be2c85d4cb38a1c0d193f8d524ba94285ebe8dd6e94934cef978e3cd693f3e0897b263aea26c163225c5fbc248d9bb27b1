{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\nimport { CONFIG } from '@constants/config.constants';\nimport { userSlice } from '@redux/user.redux';\nimport { modalSlice } from '@redux/modal.redux';\nimport { socketDataSlice } from '@redux/socket-data.redux';\nimport { useDispatch } from 'react-redux';\nconst combinedReducers = combineReducers({\n  user: userSlice.reducer,\n  modal: modalSlice.reducer,\n  socketData: socketDataSlice.reducer\n});\n\nconst reducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return _objectSpread(_objectSpread({}, state), action.payload);\n  }\n\n  return combinedReducers(state, action);\n};\n\nconst makeStore = () => configureStore({\n  reducer\n});\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useAppDispatch = () => useDispatch();\nexport const wrapper = createWrapper(makeStore, {\n  debug: CONFIG.REDUX_DEBUG\n});","map":{"version":3,"sources":["/Users/might/Documents/projects/mine/nextjs/src/components/Store/index.ts"],"names":["combineReducers","configureStore","createWrapper","HYDRATE","CONFIG","userSlice","modalSlice","socketDataSlice","useDispatch","combinedReducers","user","reducer","modal","socketData","state","action","type","payload","makeStore","useAppDispatch","wrapper","debug","REDUX_DEBUG"],"mappings":";;;;;;AAAA,SACEA,eADF,EACmBC,cADnB,QAEO,kBAFP;AAIA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,oBAAvC;AACA,SAASC,MAAT,QAAuB,6BAAvB;AACA,SAASC,SAAT,QAAqC,mBAArC;AACA,SAASC,UAAT,QAAuC,oBAAvC;AACA,SAASC,eAAT,QAAiD,0BAAjD;AACA,SAASC,WAAT,QAA4B,aAA5B;AAQA,MAAMC,gBAAmC,GAAGT,eAAe,CAAW;AACpEU,EAAAA,IAAI,EAAEL,SAAS,CAACM,OADoD;AAEpEC,EAAAA,KAAK,EAAEN,UAAU,CAACK,OAFkD;AAGpEE,EAAAA,UAAU,EAAEN,eAAe,CAACI;AAHwC,CAAX,CAA3D;;AAMA,MAAMA,OAAO,GAAG,CAACG,KAAD,EAA6CC,MAA7C,KAAmE;AACjF,MAAIA,MAAM,CAACC,IAAP,KAAgBb,OAApB,EAA6B;AAC3B;AACA,2CACKW,KADL,GAEKC,MAAM,CAACE,OAFZ;AAID;;AACD,SAAOR,gBAAgB,CAACK,KAAD,EAAQC,MAAR,CAAvB;AACD,CATD;;AAWA,MAAMG,SAAS,GAAG,MAAMjB,cAAc,CAAC;AAAEU,EAAAA;AAAF,CAAD,CAAtC;;AAMA;AACA,OAAO,MAAMQ,cAAc,GAAG,MAAMX,WAAW,EAAxC;AAEP,OAAO,MAAMY,OAAO,GAAGlB,aAAa,CAAWgB,SAAX,EAAsB;AAAEG,EAAAA,KAAK,EAAEjB,MAAM,CAACkB;AAAhB,CAAtB,CAA7B","sourcesContent":["import {\n  combineReducers, configureStore, Reducer, ThunkAction,\n} from '@reduxjs/toolkit';\nimport { Action, AnyAction, CombinedState } from 'redux';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\nimport { CONFIG } from '@constants/config.constants';\nimport { userSlice, UserState } from '@redux/user.redux';\nimport { modalSlice, ModalState } from '@redux/modal.redux';\nimport { socketDataSlice, SocketDataState } from '@redux/socket-data.redux';\nimport { useDispatch } from 'react-redux';\n\nexport interface AppState {\n  user: UserState,\n  modal: ModalState,\n  socketData: SocketDataState,\n}\n\nconst combinedReducers: Reducer<AppState> = combineReducers<AppState>({\n  user: userSlice.reducer,\n  modal: modalSlice.reducer,\n  socketData: socketDataSlice.reducer,\n});\n\nconst reducer = (state: CombinedState<AppState> | undefined, action: AnyAction) => {\n  if (action.type === HYDRATE) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return {\n      ...state, // use previous state\n      ...action.payload, // apply delta from hydration\n    };\n  }\n  return combinedReducers(state, action);\n};\n\nconst makeStore = () => configureStore({ reducer });\n\nexport type AppStore = ReturnType<typeof makeStore>;\n// export type AppState = ReturnType<AppStore['getState']>;\nexport type AppDispatch = AppStore['dispatch'];\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppState, unknown, Action>;\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport const wrapper = createWrapper<AppStore>(makeStore, { debug: CONFIG.REDUX_DEBUG });\n"]},"metadata":{},"sourceType":"module"}