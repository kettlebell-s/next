{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient, InMemoryCache, HttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { CONFIG } from '@constants/config.constants';\nimport { IS_BROWSER } from '@constants/other.constants';\nimport { getCookieByName } from '@helpers/cookie.helper';\nconst httpLink = new HttpLink({\n  uri: 'http://0.0.0.0:7009/graphql',\n  credentials: 'same-origin'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  let csrfToken = CONFIG.CSRF_TOKEN;\n\n  if (IS_BROWSER) {\n    csrfToken = getCookieByName('csrfToken') || CONFIG.CSRF_TOKEN;\n  }\n\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      'x-csrf-token': csrfToken,\n      'x-csrf-token-portal': csrfToken\n    })\n  };\n});\nconst defaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'cache-and-network',\n    errorPolicy: 'ignore'\n  },\n  query: {\n    fetchPolicy: 'network-only',\n    errorPolicy: 'all'\n  },\n  mutate: {\n    errorPolicy: 'all'\n  }\n};\nexport const apolloClient = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  connectToDevTools: true,\n  defaultOptions\n});","map":{"version":3,"sources":["/Users/might/Documents/projects/mine/nextjs/src/helpers/apollo.helper.ts"],"names":["ApolloClient","InMemoryCache","HttpLink","setContext","CONFIG","IS_BROWSER","getCookieByName","httpLink","uri","credentials","authLink","_","headers","csrfToken","CSRF_TOKEN","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","mutate","apolloClient","link","concat","cache","connectToDevTools"],"mappings":";;;;;;AAAA,SACEA,YADF,EAEEC,aAFF,EAIEC,QAJF,QAKO,gBALP;AAMA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,SAASC,MAAT,QAAuB,6BAAvB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,SAASC,eAAT,QAAgC,wBAAhC;AAEA,MAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAC5BM,EAAAA,GAAG,EAAE,6BADuB;AAE5BC,EAAAA,WAAW,EAAE;AAFe,CAAb,CAAjB;AAKA,MAAMC,QAAQ,GAAGP,UAAU,CAAC,CAACQ,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,MAAIC,SAAS,GAAGT,MAAM,CAACU,UAAvB;;AAEA,MAAIT,UAAJ,EAAgB;AACdQ,IAAAA,SAAS,GAAGP,eAAe,CAAC,WAAD,CAAf,IAAgCF,MAAM,CAACU,UAAnD;AACD;;AAED,SAAO;AACLF,IAAAA,OAAO,kCACFA,OADE;AAEL,sBAAgBC,SAFX;AAGL,6BAAuBA;AAHlB;AADF,GAAP;AAOD,CAd0B,CAA3B;AAgBA,MAAME,cAA8B,GAAG;AACrCC,EAAAA,UAAU,EAAE;AACVC,IAAAA,WAAW,EAAE,mBADH;AAEVC,IAAAA,WAAW,EAAE;AAFH,GADyB;AAKrCC,EAAAA,KAAK,EAAE;AACLF,IAAAA,WAAW,EAAE,cADR;AAELC,IAAAA,WAAW,EAAE;AAFR,GAL8B;AASrCE,EAAAA,MAAM,EAAE;AACNF,IAAAA,WAAW,EAAE;AADP;AAT6B,CAAvC;AAcA,OAAO,MAAMG,YAAY,GAAG,IAAIrB,YAAJ,CAAiB;AAC3CsB,EAAAA,IAAI,EAAEZ,QAAQ,CAACa,MAAT,CAAgBhB,QAAhB,CADqC;AAE3CiB,EAAAA,KAAK,EAAE,IAAIvB,aAAJ,EAFoC;AAG3CwB,EAAAA,iBAAiB,EAAE,IAHwB;AAI3CV,EAAAA;AAJ2C,CAAjB,CAArB","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  DefaultOptions,\n  HttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport { CONFIG } from '@constants/config.constants';\nimport { IS_BROWSER } from '@constants/other.constants';\nimport { getCookieByName } from '@helpers/cookie.helper';\n\nconst httpLink = new HttpLink({\n  uri: 'http://0.0.0.0:7009/graphql',\n  credentials: 'same-origin',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  let csrfToken = CONFIG.CSRF_TOKEN;\n\n  if (IS_BROWSER) {\n    csrfToken = getCookieByName('csrfToken') || CONFIG.CSRF_TOKEN;\n  }\n\n  return {\n    headers: {\n      ...headers,\n      'x-csrf-token': csrfToken,\n      'x-csrf-token-portal': csrfToken,\n    },\n  };\n});\n\nconst defaultOptions: DefaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'cache-and-network',\n    errorPolicy: 'ignore',\n  },\n  query: {\n    fetchPolicy: 'network-only',\n    errorPolicy: 'all',\n  },\n  mutate: {\n    errorPolicy: 'all',\n  },\n};\n\nexport const apolloClient = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  connectToDevTools: true,\n  defaultOptions,\n});\n"]},"metadata":{},"sourceType":"module"}